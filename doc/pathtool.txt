*pathtool.txt*  Efficient file path manipulation for Neovim

===============================================================================
                                                                    *pathtool*

A Neovim plugin for efficient file path manipulation, providing simple ways to
copy, convert, and preview file paths.

===============================================================================
CONTENTS                                                   *pathtool-contents*

    1. Introduction ........................... |pathtool-introduction|
    2. Installation ........................... |pathtool-installation|
    3. Commands ............................... |pathtool-commands|
    4. Keymaps ............................... |pathtool-keymaps|
    5. Configuration .......................... |pathtool-configuration|
    6. Path Preview Window .................... |pathtool-preview|
    7. API Usage .............................. |pathtool-api|
    8. About .................................. |pathtool-about|

===============================================================================
1. INTRODUCTION                                         *pathtool-introduction*

Pathtool provides a set of commands and mappings to work with file paths in
Neovim. It allows you to copy paths in various formats, convert between path
styles, and preview all available path formats in an interactive window.

Key features:
- Copy various path formats (absolute, relative, project-relative)
- Extract filenames and directory names
- Get all files in the current directory recursively
- Convert between path styles (Windows/Unix)
- Transform paths to file URLs
- Interactive path preview window
- Project root detection
- System clipboard integration

===============================================================================
2. INSTALLATION                                         *pathtool-installation*

Using packer.nvim: >lua
    use {
      'mikinovation/pathtool.nvim',
      config = function()
        require('pathtool').setup()
      end
    }
<

Using lazy.nvim: >lua
    {
      'mikinovation/pathtool.nvim',
      config = function()
        require('pathtool').setup()
      end
    }
<

Using vim-plug: >vim
    Plug 'mikinovation/pathtool.nvim'
<
    Then add to your init.lua (optional): >lua
    require('pathtool').setup({
      -- your configuration here
    })
<

===============================================================================
3. COMMANDS                                                *pathtool-commands*

The plugin provides the following commands:

*:PathCopyAbsolute*     Copy absolute path to clipboard.

*:PathCopyRelative*     Copy relative path (from current working directory) to
                      clipboard.

*:PathCopyProject*      Copy project-relative path (from detected project root)
                      to clipboard.

*:PathCopyFilename*     Copy filename to clipboard.

*:PathCopyFilenameNoExt* Copy filename without extension to clipboard.

*:PathCopyDirname*      Copy directory path to clipboard.

*:PathCopyDirectoryFiles* Copy all file paths in current directory (recursively)
                       to clipboard.

*:PathConvertStyle*     Convert between Windows and Unix path styles and copy
                      the result to clipboard.

*:PathToUrl*            Convert path to file URL and copy to clipboard.

*:PathPreview*          Show the path preview window with all available
                      formats.

===============================================================================
4. KEYMAPS                                                *pathtool-keymaps*

Pathtool does not set up any keymaps automatically. You can define your own 
keymaps to call the plugin commands in your configuration file.

Example of setting up keymaps in your Neovim configuration: >lua
    -- Map keys directly to commands
    vim.keymap.set('n', '<leader>pa', ':PathCopyAbsolute<CR>', 
                  { desc = "Copy absolute path", silent = true })
    vim.keymap.set('n', '<leader>pr', ':PathCopyRelative<CR>', 
                  { desc = "Copy relative path", silent = true })
    vim.keymap.set('n', '<leader>pp', ':PathCopyProject<CR>', 
                  { desc = "Copy project-relative path", silent = true })
    vim.keymap.set('n', '<leader>pf', ':PathCopyFilename<CR>', 
                  { desc = "Copy filename", silent = true })
    vim.keymap.set('n', '<leader>pn', ':PathCopyFilenameNoExt<CR>', 
                  { desc = "Copy filename without extension", silent = true })
    vim.keymap.set('n', '<leader>pd', ':PathCopyDirname<CR>', 
                  { desc = "Copy directory path", silent = true })
    vim.keymap.set('n', '<leader>pD', ':PathCopyDirectoryFiles<CR>', 
                  { desc = "Copy all files in directory", silent = true })
    vim.keymap.set('n', '<leader>pc', ':PathConvertStyle<CR>', 
                  { desc = "Convert path style", silent = true })
    vim.keymap.set('n', '<leader>pu', ':PathToUrl<CR>', 
                  { desc = "Convert to file URL", silent = true })
    vim.keymap.set('n', '<leader>po', ':PathPreview<CR>', 
                  { desc = "Open path preview", silent = true })
<

You can use any key combinations that suit your workflow.

===============================================================================
5. CONFIGURATION                                      *pathtool-configuration*

Pathtool can be configured using the setup() function in Lua:

>lua
    require('pathtool').setup({
      use_system_clipboard = true,
      show_notifications = true,
      notification_timeout = 3000,
      path_display_length = 60,
      detect_project_root = true,
      project_markers = {
        '.git', '.svn', 'package.json', 'Cargo.toml', 'go.mod', 
        'Makefile', '.project', 'CMakeLists.txt', 'pyproject.toml'
      },
      directory_files = {
        max_files = 1000,
        max_depth = 5,
        ignored_patterns = {
          "%.git",
          "node_modules",
          "%.DS_Store",
          "%.cache",
          "build",
          "dist"
        },
        include_directories = false,
        relative_paths = true,
      },
    })
<

Configuration options:

*use_system_clipboard*   (boolean, default: true)
                        When true, copies paths to the system clipboard
                        (+ register) in addition to the unnamed register.

*show_notifications*     (boolean, default: true)
                        Show notifications when paths are copied.

*notification_timeout*   (number, default: 3000)
                        Notification timeout in milliseconds.

*path_display_length*    (number, default: 60)
                        Maximum path length to display in notifications
                        before truncating.

*detect_project_root*    (boolean, default: true)
                        Enable project root detection for project-relative
                        paths.

*project_markers*        (table, default: various common project files)
                        Files or directories that identify a project root.

*directory_files*        (table) Configuration for directory file listing:

  *max_files*            (number, default: 1000)
                        Maximum number of files to retrieve.

  *max_depth*            (number, default: 5)
                        Maximum directory depth to traverse.

  *ignored_patterns*     (table, default: see above)
                        Patterns to ignore when listing directory files.

  *include_directories*  (boolean, default: false)
                        Whether to include directories in the result.

  *relative_paths*       (boolean, default: true)
                        Use paths relative to the current directory.

===============================================================================
6. PATH PREVIEW WINDOW                                     *pathtool-preview*

The path preview window displays all available path formats for the current
file. It can be accessed with the :PathPreview command.

Inside the preview window, you can press keys to copy specific paths:

a       Copy absolute path
r       Copy relative path
p       Copy project relative path
f       Copy filename
n       Copy filename without extension
d       Copy directory path
c       Copy converted path style
u       Copy file URL
D       Copy all files in directory
q/Esc   Close the window

The window will automatically close after copying a path or when focus is lost.

===============================================================================
7. API USAGE                                                   *pathtool-api*

You can use pathtool's functions directly in your Lua code:

Main module (require('pathtool')): >lua
    local pathtool = require('pathtool')

    -- Get paths
    local abs_path = pathtool.get_absolute_path()
    local rel_path = pathtool.get_relative_path()
    local project_path = pathtool.get_project_relative_path()
    local filename = pathtool.get_filename()
    local filename_no_ext = pathtool.get_filename_without_ext()
    local dirname = pathtool.get_dirname(
    local dir_files = pathtool.get_all_directory_files()

    -- Convert paths
    local converted = pathtool.convert_path_style()
    local file_url = pathtool.encode_path_as_url()

    -- Copy to clipboard
    pathtool.copy_to_clipboard(abs_path)
    pathtool.copy_directory_files()

    -- Show preview window
    pathtool.show_path_preview()
<

Utilities module (require('pathtool.utils')): >lua
    local utils = require('pathtool.utils')

    -- OS and path detection
    local is_win = utils.is_windows()
    local is_unix = utils.is_unix()
    local is_macos = utils.is_macos()
    local is_win_path = utils.is_windows_path(path)
    local is_unix_path = utils.is_unix_path(path)

    -- Path conversion
    local native_path = utils.to_native_path(path)
    local converted = utils.convert_path_style(path)
    local normalized = utils.normalize_path(path)
    local encoded = utils.url_encode(text)
    local file_url = utils.path_to_file_url(path)

    -- Path manipulation
    local rel_path = utils.path_relative_to(path, base)
    local with_ext = utils.change_extension(path, 'js')
    local parent = utils.path_up(path, 1)
    local combined = utils.join_paths(path1, path2)
    local display = utils.safe_display_path(path, 60)
    
    -- Directory files
    local files = utils.get_all_files_in_directory(directory, options)
<

===============================================================================
8. ABOUT                                                      *pathtool-about*

Author:    mikinovation
License:   MIT
GitHub:    https://github.com/mikinovation/pathtool.nvim

For bug reports and feature requests, please use the GitHub issue tracker.

===============================================================================
vim:tw=78:ts=4:ft=help:norl:
